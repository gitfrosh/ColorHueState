import Head from "next/head";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { watchBlockNumber } from "@wagmi/core";
import { useEffect, useState } from "react";
import { ethers, Signer } from "ethers";
import { constants } from "../constants";
import { useAccount, useProvider, useSigner } from "wagmi";
import Link from "next/link";
import { render_circles } from "../utils";
import { Gallery } from "@/components/Gallery";

export default function Home() {
  const { address } = useAccount();
  const [blockData, setBlockData] = useState<any>();
  const [caughtBlock, catchBlock] = useState<any>();
  const provider = useProvider();
  const { data: signer } = useSigner();
  const [isMinted, setMinted] = useState<boolean | string | undefined>(false);
  const [svg, setSVG] = useState<string>();
  const [isMinting, toggleMinting] = useState(false);
  const contract = new ethers.Contract(
    constants.NFT_ADDRESS,
    constants.NFT_ABI
  );

  useEffect(() => {
    const svg = render_circles(blockData?.hash);
    setSVG(svg);
  }, [blockData]);

  const getBlockData = async (blockNumber: number) => {
    try {
      const data = await provider.getBlock(blockNumber);
      setBlockData(data);
    } catch (error) {
      console.log(error);
    }
  };

  const mint = async () => {
    toggleMinting(true);

    try {
      const tx = await contract
        .connect(signer as Signer)
        .mint(caughtBlock?.number);
      const result = await tx.wait();
      if (result?.transactionHash) {
        setMinted(result?.transactionHash);
      }
      toggleMinting(false);
    } catch (error) {
      console.log("ERROR: ", error);
      toggleMinting(false);
    }
  };

  useEffect(() => {
    watchBlockNumber(
      {
        chainId: 5,
        listen: true,
      },
      (blockNumber) => {
        getBlockData(blockNumber);
      }
    );
  }, []);
  return (
    <>
      <Head>
        <title>Color Hue State</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col h-screen">
        <header className="h-16 p-10 bg-black flex items-center justify-between">
          <Link className="ml-4" scroll={false} href="#about">
            <span className="text-white">about</span>
          </Link>
          <span className="mr-4">
            <ConnectButton showBalance={false} chainStatus="none" />
          </span>
        </header>
        <section className="flex-grow">
          {blockData ? (
            <div
              className="svg-container"
              dangerouslySetInnerHTML={{ __html: svg || "" }}
            />
          ) : (
            <div className="pl-12 mt-24 text-white">Loading...</div>
          )}
        </section>
        {!!caughtBlock && (
          <div
            className="absolute p-6 top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/2
          h-300 bg-black text-white border border-white rounded"
          >
            <button
              onClick={() => {
                catchBlock(undefined);
                setMinted(undefined);
              }}
            >
              <svg
                className="mx-auto w-5 h-5 text-white cursor-pointer absolute top-2 right-2"
                viewBox="0 0 24 24"
                fill="currentColor"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path d="M12 10.586l4.95-4.95 1.414 1.415-4.95 4.95 4.95 4.95-1.414 1.414-4.95-4.95-4.95 4.95-1.414-1.414 4.95-4.95-4.95-4.95L7.05 5.636l4.95 4.95z"></path>
              </svg>
            </button>
            <div className="relative">
              {`You chose Block #${caughtBlock?.number}`!}

              <br />
              {!isMinted && <p>Ready to mint? (only gas fees)</p>}
              <br />
              {!isMinted && (
                <button
                  disabled={isMinting}
                  onClick={() => {
                    mint();
                  }}
                  className={`${
                    isMinting && "cursor-not-allowed"
                  } bg-transparent hover:bg-white text-white font-semibold hover:text-black py-2 px-4 border border-white hover:border-transparent rounded`}
                >
                  {isMinting && !isMinted ? "Loading.." : "Mint"}
                </button>
              )}
              {isMinted && !isMinting && (
                <a
                  target={"_blank"}
                  href={`https://goerli.etherscan.io/tx/${isMinted}`}
                >
                  .. View transaction
                </a>
              )}
            </div>
          </div>
        )}
        {blockData && (
          <section className="mb-10 ml-16 mr-16 h-12 bg-black text-white">
            <div className="h-16 bg-black text-white flex items-center justify-between">
              <div className="">
                <p>
                  Block # <span>{blockData?.number}</span>
                </p>
                {/* <p>
                  Hash #{" "}
                  <span>
                    {blockDataHash?.substring(0, 6)}
                    <br />
                    {blockDataHash?.substring(6, 12)}
                    <br />
                    {blockDataHash?.substring(12, 18)}
                    <br />
                    {blockDataHash?.substring(18, 24)}
                    <br />
                    {blockDataHash?.substring(24, 30)}
                    <br />
                    {blockDataHash?.substring(30, 36)}
                    <br />
                    {blockDataHash?.substring(36, 42)}
                    <br />
                    {blockDataHash?.substring(42, 48)}
                    <br />
                    {blockDataHash?.substring(48, 54)}
                    <br />
                    {blockDataHash?.substring(54, 60)}
                    <br />
                    {blockDataHash?.substring(60, 64)}
                  </span>
                </p>
                <p>
                  Time # <span>{blockData?.timestamp}</span>
                </p> */}
              </div>
              <div className="">
                {address && (
                  <button
                    onClick={() => {
                      const svgCopy = `${svg}`;
                      catchBlock({
                        number: blockData?.number,
                        svg: svgCopy,
                      });
                    }}
                    className="bg-transparent hover:bg-white text-white font-semibold hover:text-black py-2 px-4 border border-white hover:border-transparent rounded"
                  >
                    {!caughtBlock ? "Catch!" : "Catch new one!"}
                  </button>
                )}
              </div>
            </div>
          </section>
        )}
      </div>

      <div className="flex flex-col min-h-screen">
        <section
          id="about"
          className="p-12 bg-black grid grid-cols-1 md:grid-cols-2"
        >
          <div>
            <h2 className="text-xl text-white font-bold mb-4">ColorHueState</h2>
            <div className="text-white p-2">
              ColorHueState is a cutting-edge digital art project that
              seamlessly blends the worlds of blockchain technology and visual
              aesthetics. Drawing inspiration from the dynamic and ever-evolving
              nature of the Ethereum blockchain, this immersive experience
              generates an exquisite symphony of chromatic circles, each
              representing the unique hues of the most recent Ethereum block
              hash. By tapping into the inherent randomness and unpredictability
              of blockchain data, ColorHueState is able to create a vivid and
              constantly changing visual tapestry. The result is a mesmerizing
              exploration of color, form, and movement that challenges
              traditional notions of digital artistry. <br /> <br /> Each circle
              embodies the essence of a singular moment in the Ethereum network,
              immortalizing it in a kaleidoscope of vibrant hues. As a testament
              to the beauty of decentralized networks, ColorHueState transcends
              the boundaries of conventional art, inviting viewers to ponder the
              intricate connections between technology and creativity. This
              compelling intersection of art and blockchain serves as a metaphor
              for the boundless potential of human innovation and our collective
              pursuit of harmony amidst chaos. ColorHueState is more than just
              an artistic display; it is an invitation to journey through the
              enigmatic world of blockchain, where every Ethereum block hash
              births a new, ephemeral masterpiece. Immerse yourself in the
              dynamic dance of colors, as ColorHueState captures the fluidity of
              the digital realm and transforms it into a visual symphony for the
              senses.
            </div>
          </div>
          <div>
            <div className="text-white p-2">
              As a testament to the beauty of decentralized networks,
              ColorHueState transcends the boundaries of conventional art,
              inviting viewers to ponder the intricate connections between
              technology and creativity. This compelling intersection of art and
              blockchain serves as a metaphor for the boundless potential of
              human innovation and our collective pursuit of harmony amidst
              chaos. <br /> <br /> ColorHueState is more than just an artistic
              display; it is an invitation to journey through the enigmatic
              world of blockchain, where every Ethereum block hash births a new,
              ephemeral masterpiece. Immerse yourself in the dynamic dance of
              colors, as ColorHueState captures the fluidity of the digital
              realm and transforms it into a visual symphony for the senses.
            </div>
          </div>
        </section>
      </div>
      <div>
        <section className="h-30">
          <Gallery />
        </section>
      </div>
      <footer className="h-16 bg-gray-900 text-white flex items-center justify-center">
        © {new Date().getFullYear()} Jurgen Ostarhild
      </footer>
    </>
  );
}
